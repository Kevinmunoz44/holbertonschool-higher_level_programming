===========================
0-add_integer.py
===========================
Using ``0-add_integer.py``
----------------------

This module defines an integer addition function ``add_integer(a, b=98)``.
    >>> add_integer = __import__('0-add_integer').add_integer

Function add two integers
    >>> add_integer(2, 3)
    5

Function add two integers with negative and positive numbers
    >>> add_integer(2, -3)
    -1

Function add two floating point numbers
    >>> add_integer(2.0, 3.0)
    5

Note that floats are casted to ints before addition is performed.
    >>> add_integer(2.9, 0.2)
    2

Floating and non-floating point values can be combined.
    >>> add_integer(-2.9, -0.2)
    -2

The second argument is optional - by default, it is 98.
    >>> add_integer(2)
    100

expects that both arguments are either integers or floats. If argument is a non-number, show error
    >>> add_integer("hello", 3)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Test 09: Two negative integers passed
    >>> add_integer(-5, -3)
    -8

Test 14: Non-numeric arguments
    >>> add_integer("hello", "world")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

expects that both arguments are integers or floats.If argument is a no numbers, a TypeError is raised:
    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function with NaN numbers.
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

The function with NaN numbers.
    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
